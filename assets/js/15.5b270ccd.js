(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{340:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("相同点：")]),t._v(" "),a("ol",[a("li",[t._v("都不能被实例化")]),t._v(" "),a("li",[t._v("接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能被实例化")])]),t._v(" "),a("p",[t._v("不同点：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("定义的关键字")]),t._v("不同。")]),t._v(" "),a("li",[t._v("子类"),a("strong",[t._v("继承或实现关键字")]),t._v("不同。")]),t._v(" "),a("li",[a("strong",[t._v("类型扩展")]),t._v("不同：抽象类是单继承，而接口是多继承。 实现的两边均无限制。")]),t._v(" "),a("li",[a("strong",[t._v("属性访问控制符")]),t._v("：抽象类无限制，而接口有限制，接口默认的是 public 控制符。")]),t._v(" "),a("li",[a("strong",[t._v("方法访问控制符")]),t._v("：抽象类无限制，只是抽象类中的抽象方法不能被 private 修饰；而接口有限制，接口默认的是 public 控制符。")]),t._v(" "),a("li",[a("strong",[t._v("方法实现不同")]),t._v("：抽象类中的普通方法必须有实现，抽象方法必须没有实现；而接口中普通方法（抽象方法）不能有实现，但在 JDK 8 中的 static 和 defualt 方法必须有实现。")]),t._v(" "),a("li",[a("strong",[t._v("静态代码块")]),t._v("的使用不同：抽象类可以有静态代码块，而接口不能有。")]),t._v(" "),a("li",[t._v("还有：")])]),t._v(" "),a("p",[t._v("抽象类可以有构造器，接口不能有构造器；\n抽象类可以有main方法并且允许，接口不行。")]),t._v(" "),a("h2",{attrs:{id:"区别1-定义关键字不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别1-定义关键字不同"}},[t._v("#")]),t._v(" 区别1：定义关键字不同")]),t._v(" "),a("p",[t._v("接口使用关键字 interface 来定义。抽象类使用关键字 abstract 来定义。")]),t._v(" "),a("h2",{attrs:{id:"区别2-继承或实现的关键字不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别2-继承或实现的关键字不同"}},[t._v("#")]),t._v(" 区别2：继承或实现的关键字不同")]),t._v(" "),a("p",[t._v("接口使用 implements 关键字定义其具体实现。抽象类使用 extends 关键字让子类继承。")]),t._v(" "),a("h2",{attrs:{id:"区别3-子类扩展的数量不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别3-子类扩展的数量不同"}},[t._v("#")]),t._v(" 区别3：子类扩展的数量不同")]),t._v(" "),a("p",[a("strong",[t._v("类只能继承一个父类（单继承），接口可以继承多个接口（多继承）")]),t._v("\n可以多个类实现一个接口，也可以一个类实现多个接口"),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/465f4aa9-e748-45b6-a963-be75405df178.png",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/9e8f9950-1b7a-4dcc-875c-02046566d78f.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"区别4-属性访问控制符不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别4-属性访问控制符不同"}},[t._v("#")]),t._v(" 区别4：属性访问控制符不同")]),t._v(" "),a("p",[t._v("接口中属性的访问控制符只能是 public，如下图所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/3b036fa6-d55e-4092-9c37-513817ec53e0.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("接口中的属性默认是 public static final 修饰的。")])]),t._v(" "),a("p",[t._v("抽象类中的属性访问控制符无限制，可为任意控制符，如下图所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/c60bf81a-af54-468b-9704-ebcc855d30e1.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"区别5-方法访问控制符不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别5-方法访问控制符不同"}},[t._v("#")]),t._v(" 区别5：方法访问控制符不同")]),t._v(" "),a("p",[t._v("接口中方法的默认控制符是 public，并且不能定义为其他控制符，如下图所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/8f6b1d66-8916-4315-bb5e-883e90a46dda.png",alt:""}}),t._v("\n抽象类中的方法控制符无限制，其中抽象方法不能使用 private 修饰，如下代码所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/fba38634-d095-441f-94cc-772f7f374830.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"区别6-方法实现不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别6-方法实现不同"}},[t._v("#")]),t._v(" 区别6：方法实现不同")]),t._v(" "),a("p",[t._v("接口中普通方法（就是抽象方法，省略了abstract）不能有具体的方法实现，在 JDK 8 之后 static 和 default 方法必须有方法实现，如下代码所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/ac5ee019-176d-4dc1-bfdc-2c8e0f9ac017.png",alt:""}}),t._v("\n从上述结果可以看出：static 或 default 方法如果没有方法实现就会报错，而普通方法如果有方法实现就会报错。")]),t._v(" "),a("p",[t._v("抽象类中普通方法可以有方法实现，抽象方法不能有方法实现，如下代码所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/38714915-d3d6-4ea9-ab78-01c1189323f4.png",alt:""}}),t._v("\n从上述结果可以看出：抽象类中的普通方法如果没有方法实现就会报错，而抽象方法如果有方法实现则会报错。")]),t._v(" "),a("h2",{attrs:{id:"区别7-静态代码块使用不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别7-静态代码块使用不同"}},[t._v("#")]),t._v(" 区别7：静态代码块使用不同")]),t._v(" "),a("p",[t._v("接口中不能使用静态代码块，如下代码所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/23456903-b68e-403e-bc41-43b708f26ab4.png",alt:""}}),t._v("\n抽象类中可以使用静态代码块，如下代码所示："),a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cyn6/image_storage/09f3e0bc-d332-4dae-80f6-7f46f64cf7ba.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);