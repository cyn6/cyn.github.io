(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{341:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_3-0-1-0-3-将会返回什么-true-还是-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-0-1-0-3-将会返回什么-true-还是-false"}},[t._v("#")]),t._v(" 3*0.1 == 0.3 将会返回什么？true 还是 false？")]),t._v(" "),a("p",[a("strong",[t._v("false")]),t._v("，因为有些浮点数不能完全精确的表示出来。因此，判断要用-，小于如1e-5则相等。\n再比如：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0.010000001")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"为什么会出错呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会出错呢"}},[t._v("#")]),t._v(" 为什么会出错呢？")]),t._v(" "),a("p",[t._v("实际上，不是运算本身会出错，而是计算机根本就不能精确的表示很多数，比如0.1这个数。\n计算机是用一种二进制格式存储小数的，这个二进制格式不能精确表示0.1，它只能表示一个非常接近0.1但又不等于0.1的一个数。\n数字都不能精确表示，在不精确数字上的运算结果不精确也就不足为奇了。\n0.1怎么会不能精确表示呢？在十进制的世界里是可以的，但在二进制的世界里不行。在说二进制之前，我们先来看下熟悉的十进制。\n实际上，十进制也只能表示那些可以表述为10的多少次方和的数，比如12.345，实际上表示的：1_10+2_1+3_0.1+4_0.01+5*0.001，与整数的表示类似，小数点后面的每个位置也都有一个位权，从左到右，依次为 0.1,0.01,0.001,…即10^(-1), 10^(-2), 10^(-3)。\n很多数，十进制也是不能精确表示的，比如1/3, 保留三位小数的话，十进制表示是0.333，但无论后面保留多少位小数，都是不精确的，用0.333进行运算，比如乘以3，期望结果是1，但实际上却是0.999。\n二进制是类似的，但二进制只能表示哪些可以表述为2的多少次方和的数，来看下2的次方的一些例子：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("2的次方")]),t._v(" "),a("th",[t._v("十进制")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("2^(-1)")]),t._v(" "),a("td",[t._v("0.5")])]),t._v(" "),a("tr",[a("td",[t._v("2^(-2)")]),t._v(" "),a("td",[t._v("0.25")])]),t._v(" "),a("tr",[a("td",[t._v("2^(-3)")]),t._v(" "),a("td",[t._v("0.125")])]),t._v(" "),a("tr",[a("td",[t._v("2^(-4)")]),t._v(" "),a("td",[t._v("0.0625")])])])]),t._v(" "),a("p",[t._v("因此只可以精确表示为2的某次方之和的数，其他数则不能精确表示。")]),t._v(" "),a("h2",{attrs:{id:"为什么一定要用二进制呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么一定要用二进制呢"}},[t._v("#")]),t._v(" 为什么一定要用二进制呢？")]),t._v(" "),a("p",[t._v("为什么就不能用我们熟悉的十进制呢？在最最底层，计算机使用的电子元器件只能表示两个状态，通常是低压和高压，对应0和1，使用二进制容易基于这些电子器件构建硬件设备和进行运算。如果非要使用十进制，则这些硬件就会复杂很多，并且效率低下。")]),t._v(" "),a("h2",{attrs:{id:"为什么有的小数计算是准确的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么有的小数计算是准确的"}},[t._v("#")]),t._v(" 为什么有的小数计算是准确的？")]),t._v(" "),a("p",[t._v("如果你编写程序进行试验，你会发现有的计算结果是准确的。比如，我用Java写：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0.2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0.010000001")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("按照上面的说法，第一行的结果应该也不对啊？\n其实，这只是Java语言给我们造成的假象，计算结果其实也是不精确的，但是由于结果和0.2足够接近，在输出的时候，Java选择了输出0.2这个看上去非常精简的数字，而不是一个中间有很多0的小数。")]),t._v(" "),a("h2",{attrs:{id:"怎么处理计算不精确"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么处理计算不精确"}},[t._v("#")]),t._v(" 怎么处理计算不精确")]),t._v(" "),a("p",[t._v("计算不精确，怎么办呢？")]),t._v(" "),a("ul",[a("li",[t._v("减小精度。大部分情况下，我们不需要那么高的精度，可以四舍五入，或者在输出的时候只保留固定个数的小数位。")]),t._v(" "),a("li",[t._v("进行转换。如果真的需要比较高的精度，可以将小数转化为整数进行运算，运算结束后再转化为小数。")]),t._v(" "),a("li",[t._v("使用十进制的数据类型。这个没有统一的规范，在Java中是用BigDecimal，运算更准确，但效率比较低。")])]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("很多小数计算机中不能精确表示，通常只可以精确表示为2的某次方之和的数，其他数则不能精确表示，因为计算机的基本思维是二进制的。")])])}),[],!1,null,null,null);a.default=e.exports}}]);